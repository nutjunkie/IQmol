                     ==============================================
                      Building IQmol with Conda & Homebrew on OS X
                     ==============================================


Libraries
~~~~~~~~~

 o You will need XCode > 5.0 installed in order to install the Qt libraries.
   To get the command line tools installed you need to run:
     xcode-select --install

 o Cmake will be required to compile some of the libraries, the installer can 
   be obtained from http://www.cmake.org/download/

 o You may wish to perform the following commands inside a conda environment.

    conda install -c conda-forge openbabel=2.4
    conda install qt=5.9.7
    conda install libssh2

    brew install boost
    brew install gfortran
    brew install openssl@1.1

 o Update the mac.pri file to include the required INLCUDEPATH and LIBS
   environment variables for Boost, openssl, libssh2, openbabel, and
   gfortran. Supposing the above commands were run inside a conda
   environment called 'iqmol-dev', the following mac.pri could be used
   as an example. Your mileage may vary.

    CONFIG += DEPLOY

    contains(CONFIG, DEPLOY) {
       CONFIG += release

       # Boost
       BOOST        = /usr/local/Cellar/boost/1.76.0/
       INCLUDEPATH += $${BOOST}/include
       LIBS        += $${BOOST}/lib/libboost_iostreams.a
       LIBS        += $${BOOST}/lib/libboost_serialization.a
       LIBS        += $${BOOST}/lib/libboost_exception.a

       # libssl/libcrypto
       INCLUDEPATH += /usr/local/Cellar/openssl\@1.1/1.1.1k/include/
       LIBS        += /usr/local/Cellar/openssl@1.1/1.1.1k/lib/libssl.a
       LIBS        += /usr/local/Cellar/openssl@1.1/1.1.1k/lib/libcrypto.a

       # SSH2
       INCLUDEPATH += /opt/anaconda3/envs/iqmol-dev/include
       LIBS        += /opt/anaconda3/envs/iqmol-dev/lib/libssh2.dylib

       # OpenBabel
       OPENBABEL    = /opt/anaconda3/envs/iqmol-dev/include/openbabel-2.0/
       INCLUDEPATH += /opt/anaconda3/envs/iqmol-dev/include/openbabel-2.0/
       LIBS        += /opt/anaconda3/envs/iqmol-dev/lib/libopenbabel.dylib
       LIBS        += /opt/anaconda3/envs/iqmol-dev/lib/libopenbabel.5.dylib
       LIBS        += /opt/anaconda3/envs/iqmol-dev/lib/libinchi.dylib

       # gfortran
       LIBS        += /usr/local/Cellar/gcc/11.2.0/lib/gcc/11/libgfortran.a
       LIBS        += /usr/local/Cellar/gcc/11.2.0/lib/gcc/11/libquadmath.a
       LIBS        += -L/usr/local/Cellar/gcc/11.2.0/lib/gcc/11/ -lgcc_ext.10.5

       # Misc
       LIBS        += -L/usr/X11/lib  
       LIBS        += -framework GLUT
       LIBS        += -L/usr/lib -lz -lxml2

       QMAKE_LFLAGS   += -Wl,-no_compact_unwind -stdlib=libc++ 
       QMAKE_RPATHDIR += @executable_path/../Frameworks
    }


Compilation
~~~~~~~~~~~

 o Compile the SymMol object file in src/Main and copy symmol.o to ../../build
      gfortran -c symmol.f90

 o Compile the remaining IQmol source. The application will be built in 
   IQmol.app/Contents/MacOS/
      qmake IQmol.pro
      make

 o If the previous step is successful, copy share/ to IQmol.app/Contents. This
   enables the use of shaders, molecule fragments, and the QUI interface.


Possible Issues
~~~~~~~~~~~~~~~

 o It may be necessary to define BABEL_LIBDIR and BABEL_DATADIR 
   as environment variables to /path/to/conda/env/lib/openbabel/2.4.1 and 
   /path/to/conda/env/share/openbabel/2.4.1. This allows the user to use 
   the "Geometry Optimisation" function of IQmol.

